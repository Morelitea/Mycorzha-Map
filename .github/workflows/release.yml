name: "Publish Windows and Linux builds"

on:
  push:
    branches:
      - release # Ensures it only triggers when the branch is 'release'

# This is the example from the readme.
# On each push to the `release` branch it will create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # - platform: "macos-latest" # for Arm based macs (M1 and above).
          #   args: "--target aarch64-apple-darwin"
          #   target: "aarch64-apple-darwin"
          # - platform: "macos-latest" # for Intel based macs.
          #   args: "--target x86_64-apple-darwin"
          #   target: "x86_64-apple-darwin"
          - label: "linux-x64"
            platform: "ubuntu-22.04" # x86_64 build
            args: ""
            target: ""

          - label: "linux-arm64"
            platform: "ubuntu-22.04" # Raspberry Pi / ARM64 build (cross-compiled)
            args: "--target aarch64-unknown-linux-gnu"
            target: "aarch64-unknown-linux-gnu"

          - label: "windows-x64"
            platform: "windows-latest"
            args: ""
            target: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.target }}

      - name: configure arm64 apt sources
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo dpkg --add-architecture arm64
          sudo python3 - <<'PY'
          import pathlib, re

          paths = [pathlib.Path("/etc/apt/sources.list")]
          sources_dir = pathlib.Path("/etc/apt/sources.list.d")
          if sources_dir.exists():
              for candidate in sorted(sources_dir.glob("*.list")):
                  if candidate.name == "arm64.list":
                      continue
                  paths.append(candidate)

          pattern = re.compile(r'^(\s*deb\s+\[)([^\]]+)(\]\s+.*)$')

          for path in paths:
              text = path.read_text()
              changed = False
              new_lines = []
              for raw_line in text.splitlines():
                  stripped = raw_line.strip()
                  if not stripped or stripped.startswith("#"):
                      new_lines.append(raw_line)
                      continue

                  prefix_len = len(raw_line) - len(raw_line.lstrip())
                  prefix = raw_line[:prefix_len]

                  if stripped.startswith("deb-src "):
                      new_lines.append(f"{prefix}# {stripped}")
                      changed = True
                      continue

                  match = pattern.match(raw_line)
                  if match:
                      options = match.group(2)
                      if "arch=" not in options:
                          sep = "," if options.strip() else ""
                          new_line = f"{match.group(1)}{options}{sep}arch=amd64{match.group(3)}"
                          new_lines.append(new_line)
                          changed = True
                      else:
                          new_lines.append(raw_line)
                      continue

                  if stripped.startswith("deb "):
                      rest = stripped[4:].strip()
                      new_lines.append(f"{prefix}deb [arch=amd64] {rest}")
                      changed = True
                      continue

                  new_lines.append(raw_line)

              if changed:
                  path.write_text("\n".join(new_lines) + "\n")
          PY
          sudo tee /etc/apt/sources.list.d/arm64.list > /dev/null <<'EOF'
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-backports main restricted universe multiverse
          EOF

      - name: install dependencies (ubuntu only)
        if: startsWith(matrix.platform, 'ubuntu-')
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev libgtk-3-dev patchelf
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
            sudo apt-get install -y libwebkit2gtk-4.1-dev:arm64 libappindicator3-dev:arm64 librsvg2-dev:arm64 libgtk-3-dev:arm64
          fi
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.

      - name: configure arm64 cross environment
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          echo "PKG_CONFIG_LIBDIR=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: install frontend dependencies
        run: npm install # change this to npm, pnpm or bun depending on which one you use.

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tagName: map-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: "Mycorzha Map v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
